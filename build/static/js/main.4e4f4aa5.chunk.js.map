{"version":3,"sources":["components/Form.js","components/FilterButton.js","components/Todo.js","hooks/useLocalStorage.js","components/store/Store.js","components/Theme/Theme.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","textField","width","breakpoints","down","Form","props","classes","useState","name","setName","Grid","container","className","item","TextField","label","variant","size","value","onChange","e","target","Box","pl","Button","disabled","length","color","onClick","preventDefault","trim","addTodo","FilterButton","type","aria-pressed","isPressed","setFilter","Todo","isEditing","setEditing","newName","setNewName","editFieldRef","useRef","editButtonRef","wasEditing","ref","useEffect","current","usePrevious","labelUpdate","editingTemplate","onSubmit","updateTodo","id","viewTemplate","List","ListItem","ListItemText","primary","completed","ListItemSecondaryAction","Checkbox","checked","toggleTaskCompleted","IconButton","removeTodo","focus","useLocalStorage","key","initialValue","window","localStorage","getItem","JSON","parse","error","console","log","storedValue","setStoredValue","valueToStore","Function","setItem","stringify","Context","createContext","todos","Provider","children","nanoid","text","setTodos","todo","newTodo","newTodos","filter","t","toggleTodo","foundTodo","find","map","editId","editTodo","themeLight","createMuiTheme","palette","orange","secondary","teal","themeDark","Theme","defaultTheme","darkMode","ThemeProvider","CssBaseline","root","height","paddingTop","spacing","FILTER_MAP","All","Active","task","Completed","FILTER_NAMES","Object","keys","withTheme","Component","setDarkMode","useTheme","matches","useMediaQuery","useContext","todoList","filterList","tasksNoun","headingText","listHeadingRef","prevTaskLength","justify","alignItems","Paper","elevation","tabIndex","FormControlLabel","control","Switch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e4f4aa5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\n\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    width: 400,\n    [theme.breakpoints.down(\"xs\")]: {\n      width: 200,\n    },\n  },\n}));\n\n\nfunction Form ( props )\n{\n  const classes = useStyles();\n  const [name, setName] = useState('');\n\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!name.trim()) {\n      return;\n    }\n    props.addTodo(name);\n    setName(\"\");\n  }\n\n\n  function handleChange(e) {\n    setName(e.target.value);\n  }\n\n  return (\n    \n\n     <>\n    \n      <Grid container className=\"todo-input\">\n        <Grid item>\n          <TextField\n            className={classes.textField}\n            label=\"What is your plan today?\"\n            variant=\"outlined\"\n            size=\"small\"\n           value={name}\n        onChange={handleChange}\n          />\n        </Grid>\n        <Grid item>\n          <Box pl={1}>\n            <Button\n              className=\"todo-add-btn\"\n              disabled={name.length === 0}\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={handleSubmit}\n            >\n              Add\n            </Button>\n          </Box>\n        </Grid>\n        </Grid>\n      \n        </>\n    \n\n\n    \n    \n  );\n}\n\nexport default Form;\n","import React from \"react\";\n\nfunction FilterButton(props) {\n  return (\n    <button\n      type=\"button\"\n      className=\"btn toggle-btn\"\n      aria-pressed={props.isPressed}\n      onClick={() => props.setFilter(props.name)}\n    >\n     \n      <span>{props.name}</span>\n  \n    </button>\n  );\n}\n\nexport default FilterButton;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Box from \"@material-ui/core/Box\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\n\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nconst useStyles = makeStyles((theme) => ({\n  textField: {\n    width: 400,\n    [theme.breakpoints.down(\"xs\")]: {\n      width: 200,\n    },\n  },\n}));\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nexport default function Todo(props) {\n  const [isEditing, setEditing] = useState(false);\n  const [ newName, setNewName ] = useState( '' );\n  const classes = useStyles();\n\n  const editFieldRef = useRef(null);\n  const editButtonRef = useRef(null);\n\n  const wasEditing = usePrevious( isEditing );\n  const labelUpdate = \"Would you like to update \" + props.name + \"?\";\n\n  function handleChange(e) {\n    setNewName(e.target.value);\n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (!newName.trim()) {\n      return;\n    }\n    props.updateTodo(props.id, newName);\n    setNewName(\"\");\n    setEditing(false);\n  }\n\n  const editingTemplate = (\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\n     \n        <Grid container className=\"todo-input\">\n        <Grid item>\n        <TextField\n          id={props.id}\n          className={classes.textField}\n          label={labelUpdate}\n          variant=\"outlined\"\n          size=\"small\"\n          value={newName}\n          onChange={handleChange}\n          ref={editFieldRef}\n        />\n       </Grid>\n     \n        <Grid item>\n          <Box pl={ 1 }>\n             <Button\n              type=\"submit\"\n              className=\"todo-edit-btn\"\n              variant=\"contained\"\n              color=\"secondary\">\n            \n          Save\n         \n            </Button> \n\n         <Button\n         \n          className=\"todo-edit-btn\"\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => setEditing(false)}\n        >\n          Cancel\n        \n         </Button>\n          \n          </Box>\n            </Grid>\n           </Grid>\n \n    </form>\n  );\n\n  const viewTemplate = (\n   \n     <List>\n         \n              <ListItem key={ props.id }>\n                <ListItemText primary={ props.name }  className={props.completed ? 'todo-row complete' : 'todo-row'} />\n                <ListItemSecondaryAction>\n                  <Checkbox\n                    checked={ props.completed }\n                    onClick={() => props.toggleTaskCompleted(props.id)}\n                   \n                  />\n\n                   <IconButton >\n                  \n                   <EditIcon onClick={() => setEditing(true)}\n          ref={editButtonRef} />\n                    \n                  </IconButton>\n\n                  <IconButton >\n            <DeleteIcon onClick={ () => props.removeTodo( props.id ) } color=\"primary\" />\n                             \n                  </IconButton>\n                 \n                </ListItemSecondaryAction>\n              </ListItem>\n          \n        </List>\n\n    \n  );\n\n\n  useEffect(() => {\n    if (!wasEditing && isEditing) {\n      editFieldRef.current.focus();\n    }\n    if (wasEditing && !isEditing) {\n      editButtonRef.current.focus();\n    }\n  }, [wasEditing, isEditing]);\n\n\n  return <li className=\"todo\">{isEditing ? editingTemplate : viewTemplate}</li>;\n}\n","import { useState } from \"react\";\r\n\r\nfunction useLocalStorage(key, initialValue) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      // Parse stored json or if none return initialValue\r\n      return item ? JSON.parse(item) : initialValue;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = (value) => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore =\r\n        value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n\r\nexport default useLocalStorage;\r\n","import React, { useContext, createContext } from \"react\";\r\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\r\nimport { nanoid } from \"nanoid\";\r\n\r\nconst Context = createContext({\r\n  todos: []\r\n  \r\n});\r\n\r\nconst Provider = (props) => {\r\n  const { children } = props;\r\n  const [todos, setTodos] = useLocalStorage(\"todos\", [\r\n    {\r\n      id: nanoid(),\r\n      text: \"task 1\",\r\n      completed: false,\r\n      \r\n    },\r\n    {\r\n      id: nanoid(),\r\n      text: \"task 2\",\r\n      completed: false,\r\n      \r\n    },\r\n    {\r\n      id: nanoid(),\r\n      text: \"task 3\",\r\n      completed: false,\r\n      \r\n     \r\n    },\r\n  ] );\r\n\r\n  \r\n  const addTodo = (todo) => {\r\n   \r\n    const newTodo = {\r\n      id: nanoid(),\r\n      text: todo,\r\n      completed: false,\r\n     \r\n    };\r\n    setTodos([...todos, newTodo]);\r\n  };\r\n  \r\n  const removeTodo = (id) => {\r\n    const newTodos = todos.filter((t) => t.id !== id);\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  const updateTodo = ( editId, newTodo ) =>\r\n  {\r\n    \r\n    const editTodo = todos.map( todo =>\r\n    {\r\n      if ( editId === todo.id )\r\n      {\r\n         return{...todo, text: newTodo }\r\n      }\r\n      return todo;\r\n     })\r\n    setTodos( editTodo );\r\n   \r\n  };\r\n\r\n\r\n\r\n  const toggleTodo = (id) => {\r\n    const foundTodo = todos.find((t) => t.id === id);\r\n    if (foundTodo) {\r\n      foundTodo.completed = !foundTodo.completed;\r\n    }\r\n    const newTodos = todos.map((t) => {\r\n      if (t.id === id) {\r\n        return foundTodo;\r\n      }\r\n      return t;\r\n    });\r\n    setTodos(newTodos);\r\n  };\r\n\r\n  return (\r\n    <Context.Provider value={{ todos, addTodo, removeTodo, toggleTodo, updateTodo }}>\r\n      {children}\r\n    </Context.Provider>\r\n  );\r\n};\r\n\r\nexport const useTodos = () => useContext(Context);\r\n\r\nexport const withProvider = (Component) => {\r\n  return (props) => {\r\n    return (\r\n      <Provider>\r\n        <Component {...props} />\r\n      </Provider>\r\n    );\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport { CssBaseline } from \"@material-ui/core\";\r\nimport orange from \"@material-ui/core/colors/orange\";\r\nimport teal from \"@material-ui/core/colors/teal\";\r\nimport useLocalStorage from \"../../hooks/useLocalStorage\";\r\n\r\nconst themeLight = createMuiTheme({\r\n  palette: {\r\n    type: \"light\",\r\n    primary: orange,\r\n    secondary: teal,\r\n  },\r\n});\r\n\r\nconst themeDark = createMuiTheme({\r\n  palette: {\r\n    type: \"dark\",\r\n    primary: orange,\r\n    secondary: teal,\r\n  },\r\n});\r\n\r\nconst Theme = (props) => {\r\n  const { children, darkMode } = props;\r\n  const defaultTheme = darkMode ? themeDark : themeLight;\r\n  return (\r\n    <ThemeProvider theme={defaultTheme}>\r\n      <CssBaseline />\r\n      {children}\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport const withTheme = (Component) => {\r\n  return (props) => {\r\n    const [darkMode, setDarkMode] = useLocalStorage(\"darkMode\", false);\r\n    return (\r\n      <Theme darkMode={darkMode}>\r\n        <Component {...props} darkMode={darkMode} setDarkMode={setDarkMode} />\r\n      </Theme>\r\n    );\r\n  };\r\n};\r\n","import React, { useState, useRef, useEffect} from \"react\";\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport List from \"@material-ui/core/List\";\nimport { useTodos } from \"./components/store/Store\";\nimport { withProvider } from \"./components/store/Store\";\n\nimport { makeStyles } from \"@material-ui/core\";\nimport Paper from \"@material-ui/core/Paper\";\n\nimport { useTheme } from \"@material-ui/core/styles\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { withTheme } from \"./components/Theme/Theme\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"100%\",\n    [theme.breakpoints.down(\"xs\")]: {\n      paddingTop: theme.spacing(2),\n    },\n  },\n}));\n\n\nfunction usePrevious(value) {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n\nconst FILTER_MAP = {\n  All: () => true,\n  Active: task => !task.completed,\n  Completed: task => task.completed\n};\n\nconst FILTER_NAMES = Object.keys( FILTER_MAP );\n\nfunction App ( props )\n{\n  \n  const { darkMode, setDarkMode } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.down(\"xs\"));\n\n  const [ filter, setFilter ] = useState( 'All' );\n  const { todos, toggleTodo, removeTodo, updateTodo, addTodo } = useTodos();\n    \n  const todoList = todos\n  .filter(FILTER_MAP[filter])\n  .map(todo => (\n    <Todo\n      id={todo.id}\n      name={todo.text}\n      completed={todo.completed}\n      key={todo.id}\n      toggleTaskCompleted={toggleTodo}\n      removeTodo={removeTodo}\n      updateTodo={updateTodo}\n    />\n  ));\n\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n\n \n  const tasksNoun = todoList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `You have ${todoList.length} ${tasksNoun} in this list`;\n\n  const listHeadingRef = useRef(null);\n  const prevTaskLength = usePrevious(todos.length);\n\n  useEffect(() => {\n    if (todos.length - prevTaskLength === -1) {\n      listHeadingRef.current.focus();\n    }\n  }, [todos.length, prevTaskLength]);\n\n  return (\n    <div className=\"todo-app\">\n      <Grid \n      className={ classes.root }\n      container\n      justify=\"center\"\n      alignItems={matches ? \"flex-start\" : \"center\"}\n      >\n      <Grid item>\n      <Paper elevation={8}>\n      <Form addTodo={addTodo} />\n      <div className=\"btn-group\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\" tabIndex=\"-1\" ref={listHeadingRef}>\n        {headingText}\n      </h2>\n      <List\n              id=\"container-box\"\n      >\n        {todoList}\n      </List>\n        </Paper>\n         <FormControlLabel\n          control={\n            <Switch\n              checked={darkMode}\n              onChange={() => setDarkMode(!darkMode)}\n            />\n          }\n          label=\"Dark Mode\"\n          />\n             </Grid>\n        </Grid>\n    </div>\n  );\n}\n\nexport default withTheme(withProvider(App));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./assets/css/styles.css\";\nimport App from './App';\n\n\nReactDOM.render(\n \n    <App />\n ,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}